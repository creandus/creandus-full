#!/bin/bash
# Copyright 2006 Mike Kelly
# Distributed under the terms of the GNU General Public License v2
#
# adduser.bash - intelligently adds a new user for the system package
# manager.
#
# $Id$

CREANDUS_SCRIPTDIR=${CREANDUS_SCRIPTDIR:-@CREANDUS_SCRIPTDIR@}

# Load the basic configuration.
. "${CREANDUS_SCRIPTDIR}/common/config.bash" || exit 1
. "${CREANDUS_SCRIPTDIR}/common/functions.bash" || exit 1

# We make use of egetent.
. "${CREANDUS_SCRIPTDIR}/common/getent.bash" || exit 1
# Reads the proper data file for the desired user
. "${CREANDUS_SCRIPTDIR}/common/read_userdata.bash" || exit 1

main() {
	# Read the command line arguments.
	# Currently, we expect the following:
	local newuser=${1} pkgname=${2} userspace=${3} root=${4}

	[[ -z "${newuser}" ]] && die "missing required arg: user_name"
	[[ -z "${pkgname}" ]] && die "missing required arg: pkgname"
	[[ -z "${userspace}" ]] && die "missing required arg: userspace"
	[[ -z "${root}" ]] && die "missing required arg: root"

	# Set our default action. Will be either "add" or "mod" by the end.
	local action="add"

	###
	eval `read_userdata "${newuser}"`

	# TODO: allow for more sophisticated range specifications
	local uidmin="${userid%-*}" uidmax="${userid#*-}"

	userid="${uidmin}"
	local found
	for i in $( seq "${userid}" "${uidmax}" ) ; do
		if [[ -z "$(egetent passwd ${i})" ]] ; then
			userid="${i}"
			found="yes"
			break
		elif [[ "$(egetent passwd ${i} |cut -d: -f1)" == "${newuser}" ]]
		then
			# We already have the user on the system, and they have the right
			# uid. There's nothing to do.
			debug_msg "User ${newuser} is already here with uid ${i}."
			found="yes"
			userid="${i}"
		fi
	done

	[[ -z "${found}" ]] && die "no available uid found"

	# Now, we verify this information against our database, and if there
	# isn't a match (either some value has changed, or there is no entry
	# at all), we take appropriate action

	# See if the user already exists
	if [[ ${newuser} == $(egetent passwd "${newuser}" | cut -d: -f1) ]]
	then
		# TODO: If there needs to be some change made, note it
		# properly, for the operator to take care of later with
		# the eselect tool
		local getentinfo=$(egetent passwd "${newuser}")
		
		local curruid=$(echo ${getentinfo} | cut -d: -f3)
		local currshell=$(echo ${getentinfo} |cut -d: -f7)
		local currhome=$(echo ${getentinfo} |cut -d: -f6)
		local currgroups=$(id -Gn "${newuser}" |sed 's/ /\n/'| sort -u)
		local usergroups_sort=$(echo "${usergroups}" |sed 's/,/\n/' |sort -u)
		local currcomment=$(echo ${getentinfo} |cut -d: -f5)
		
		if [[ ${curruid} -ne ${userid} 
		|| "${currshell}" != "${usershell}"
		|| "${currhome}" != "${userhome}"
		|| "${currgroups}" != "${usergroups_sort}"
		|| "${currcomment}" != "${usercomment}" ]] ; then
			debug_msg "The user ${newuser} needs some values changed." \
				"We're doing so now."
			action="mod"
		else
			# Now, since we've made the proper arrangements for any 
			# possible changes, we now add the current package name 
			# to the database and call it quits
			debug_msg "We already have a user named ${newuser}." \
				"Nothing to do." 1>&2

			"${CREANDUS_SCRIPTDIR}/db.bash" add user "${pkgname}" \
				"${newuser}" "${userspace}"
			exit 0
		fi
	fi

	if [[ -f "${DBDIR}/user/${newuser}" && -n "${DEBUG}" ]] ; then
		echo "User ${newuser} was previously added by this script," \
			"but it no longer exists" 1>&2
		echo "on the system. We'll re-add them now, but you should" \
			"have used the" 1>&2
		echo "users-config tool to cleanly remove it." 1>&2
	fi

	# Finally, we take take the necessary action, either via usermod 
	# or useradd [or it's comparable friends]
	local done_once

	for x in ${PASSWD_BACKENDS}; do
		if [[ -e "${CREANDUS_SCRIPTDIR}/auth/${x}-${userspace}-user${action}.bash" ]] 
		then
			done_once="yes"
			debug_msg "Running ${x}-${userspace}-user${action}..."
			. "${CREANDUS_SCRIPTDIR}/auth/${x}-${userspace}-user${action}.bash"
			"${x}-${userspace}-user${action}" "${userhome}" "${usergroups}" \
				"${usershell}" "${userid}" "${usercomment}" "${username}" \
				"${root}" || die "user${action} failed"
		else
			echo "$0: Auth backend ${x} with userspace ${userspace} not" \
				"supported by this script." 1>&2
		fi
	done

	[[ -z "${done_once}" ]] && die "Found no workable backends to run"

	# Properly update the dynamic users database
	"${CREANDUS_SCRIPTDIR}/db.bash" add user "${pkgname}" "${newuser}" "${userspace}"
}

if [[ "${1}" == "--test" ]] ; then
	echo "Syntax OK."
	exit 0
fi

main "$@"
# vim: ts=4 :
