# Copyright 2006-2007 Mike Kelly
# Distributed under the terms of the GNU General Public License v2
# $Id$

inherit config

DESCRIPTION="Maintain the system users added by the package manager"
MAINTAINER="pioto@pioto.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}")

### show action

describe_show() {
	echo "Show the users currently added by this script"
}

describe_show_parameters() {
	echo "<mode>"
}

describe_show_options() {
	echo "mode : One of users, groups, or all. Defaults to all."
}

do_show() {
	local scriptdir="${ROOT}@CREANDUS_SCRIPTDIR@"

	local dbdir="${ROOT}$(load_config "${scriptdir}/common/config.bash" DBDIR)"
	local mode=${1:-all}

	case ${mode} in
		users)
			for x in "${dbdir}"/user/* ; do
				[[ -e "${x}" ]] || continue
				echo "* ${x}:"
				cat "${dbdir}/user/${x}"
			done
			;;
		groups)
			for x in "${dbdir}"/group/* ; do
				[[ -e "${x}" ]] || continue
				echo "* ${x}:"
				cat "${dbdir}/group/${x}"
			done
			;;
		all)
			for x in "${dbdir}"/user/* ; do
				[[ -e "${x}" ]] || continue
				echo "* ${x}:"
				cat "${dbdir}/user/${x}"
			done
			for x in "${dbdir}"/group/* ; do
				[[ -e "${x}" ]] || continue
				echo "* ${x}:"
				cat "${dbdir}/group/${x}"
			done
			;;
		*)
			die -q "Invalid mode specification. Use one of users, groups, or all."
			;;
	esac
}

### scan action

describe_scan() {
	echo "Scans the system for any files owned by the given user and,"
	echo "optionally, removes them. ($(highlight slow))"
}

describe_scan_parameters() {
	echo "[--user user|--group group] [--remove|--chown|--show]"
}

describe_scan_options() {
	echo "--user user : scan the filesystem for all files owned by user"
	echo "--group group : scan the filesystem for all files owned by group"
	echo "--remove : remove all files which are found"
	echo "--chown : keep files found intact, but chown them to 0:0"
	echo "--show : just show files found; do nothing to them"
}

do_scan() {
	local scriptdir="${ROOT}@CREANDUS_SCRIPTDIR@"

	# Parse our commandline args
	local target="${ROOT:-/}"
	local action valid_params
	while [[ ${1#--} != ${1} ]] ; do
		if [[ "--user" == ${1} ]] ; then
			shift
			target="${target} -user ${1}"
			valid_params="yes"
			shift
		elif [[ "--group" == "${1}" ]] ; then
			shift
			target="${target} -group ${1}"
			valid_params="yes"
			shift
		elif [[ "--remove" == "${1}" ]] ; then
			shift
			action="| xargs -0 rm -rf"
		elif [[ "--chown" == "${1}" ]] ; then
			shift
			action="| xargs -0 chown 0:0"
		elif [[ "--show" == "${1}" ]] ; then
			shift
			action=""
		elif [[ "--" == "${1}" ]] ; then
			break
		else
			die -q "Unknown parameter ${1}"
		fi
	done

	if [[ ! ${valid_params} ]] ; then
		echo "You didn't provide one of the required parameters."
		echo "You can see a list of dead users and groups by running:"
		if [[ "${0}" == "eselect" ]] ; then
			echo "  \$ eselect users update --pretend"
		else
			echo "  \$ $0 update --pretend"
		fi
		die -q "You must provide either a user or a group for the scan action."
	fi

	target="${target} -print0"

	find ${target} ${action}
}

### update action

describe_update() {
	echo "Removes any users from the system that are no longer"
	echo "required by any installed package, but were once"
	echo "installed by a package."
}

describe_update_parameters() {
	echo "<--pretend|-p>"
}

describe_update_options() {
	echo "--pretend|-p : Don't actually remove. List candidates only."
}

do_update() {
	local pretend deadusers deadgroups
	local scriptdir="${ROOT}@CREANDUS_SCRIPTDIR@"

	local dbdir="${ROOT}$(load_config "${scriptdir}/common/config.bash" DBDIR)"
	local userspace="$(<  "${DBDIR}/userspace")"

	# Parse our commandline args
	while [[ ${1#--} != ${1} ]] ; do
		if [[ "--pretend" == "${1}" ]] \
		|| [[ "-p" == "${1}" ]] ; then
			shift
			pretend="yes"
		elif [[ "--" == "${1}" ]] ; then
			break
		else
			die -q "Unknown parameter ${1}"
		fi
	done

	# Find all the data files which are empty

	for x in "${dbdir}"/user/* ; do
		[[ -e "${x}" ]] || continue
		[[ -s "${x}" ]] && continue
		deadusers="${deadusers} $(basename ${x})"
	done

	for x in "${dbdir}"/group/* ; do
		[[ -e "${x}" ]] || continue
		[[ -s "${x}" ]] && continue
		deadgroups="${deadgroups} $(basename ${x})"
	done

	if [[ -z ${pretend} ]] ; then
		echo "Removing users:"
		for x in ${deadusers} ; do
			echo -n "  ${x} : "
			if ("${scriptdir}/deluser.bash" "${x}" "${userspace}" "${ROOT}")
			then
				echo "done"
			else
				die -q "failed"
			fi
		done

		echo "Removing groups:"
		for x in ${deadgroups} ; do
			echo -n "  ${x} : "
			if ("${scriptdir}/delgroup.bash" "${x}" "${userspace}" "${ROOT}")
			then
				echo "done"
			else
				die -q "failed"
			fi
		done
	else
		echo "We would have removed:"
		echo "  Users: ${deadusers}"
		echo "  Groups: ${deadgroups}"
	fi
}

# vim: set ft=eselect :
