# Copyright 2006 Mike Kelly
# Distributed under the terms of the GNU General Public License v2
#
# read_groupdata.sh - Read the proper data file for the desired group
# $Id$

# In the full implementation, should go through all the cascading
# profiles in proper order, but for now we're just parsing these 2
# config files

# XXX: Split this file up in such a way as to be automatically done
# correctly for various distros.

. "${SCRIPTDIR}/common/get_profiledirs.bash" || exit 1

# read_groupdata()
# Inputs:
#  $1 - name of group to be added
# Outputs:
#  $groupid - a range specification of valid group ids for the given group name
read_groupdata() {
	local groupfile="" profile_dirs="" d d_

	if [[ -n "${PALUDIS_PROFILE_DIRS}" ]] ; then
		profile_dirs="${PALUDIS_PROFILE_DIRS}"
	elif [[ -e "/etc/make.profile" ]] ; then
		profile_dirs="/etc/make.profile"
	else
		die "Could not determine the profile directory."
	fi
	
	local all_profile_dirs="$(get_profiledirs "${profile_dirs}")"

	for d in "group/${1}" "defaults" ; do
		for d_ in ${all_profile_dirs} ; do
			[[ -f "${d_}/accounts/${d}" ]] \
				&& groupfile="${groupfile} ${d_}/accounts/${d}"
		done
	done

	local groupid_ groupid

	for x in ${groupfile}; do
		groupid_=$(grep ^gid: ${x} |cut -d: -f2)
		groupid_=`echo ${groupid_} |sed 's,^[[:space:]]*,,'`
		groupid=${groupid:-${groupid_}}
	done

	[[ -z "${groupid}" ]] && die "couldn't determine a gid range"

	echo "local groupid=\"${groupid}\""
}
# vim: ts=4 :
