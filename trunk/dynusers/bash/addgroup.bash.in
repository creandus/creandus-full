#!/bin/bash
# Copyright 2006 Mike Kelly
# Distributed under the terms of the GNU General Public License v2
#
# addgroup.bash - intelligently adds a new group for the system package
# manager.
#
# $Id$

SCRIPTDIR=${SCRIPTDIR:-@SCRIPTDIR@}

# Load the basic configuration.
. "${SCRIPTDIR}/common/config.bash" || exit 1
. "${SCRIPTDIR}/common/functions.bash" || exit 1

# We make use of egetent.
. "${SCRIPTDIR}/common/getent.bash" || exit 1
# Reads the proper data file for the desired group
. "${SCRIPTDIR}/common/read_groupdata.bash" || exit 1

main() {
	# Read the command line arguments.
	# Currently, we expect the following:
	local newgroup=${1} pkgname=${2} userspace=${3} root=${4}

	[[ -z "${newgroup}" ]] && die "missing required arg: group_name"
	[[ -z "${pkgname}" ]] && die "missing required arg: pkgname"
	[[ -z "${userspace}" ]] && die "missing required arg: userspace"
	[[ -z "${root}" ]] && die "missing required arg: root"

	# Set our default action. Will be either "add" or "mod" by the end.
	local action="add"

	###
	eval `read_groupdata "${newgroup}"`

	# TODO: allow for more sophisticated range specifications
	local gidmin=${groupid%-*} gidmax=${groupid#*-}

	groupid=${gidmin}
	local found
	for i in $( seq ${groupid} ${gidmax} ) ; do
		if [[ -z $(egetent group ${i}) ]] ; then 
			groupid=${i}
			found="yes"
			break
		fi
	done

	[[ -z "${found}" ]] && die "no available gid found"

	# Now, we verify this information against our database, and if there
	# isn't a match (either some value has changed, or there is no entry
	# at all), we take appropriate action

	# See if the group already exists
	if [[ ${newgroup} == $(egetent group "${newgroup}" | cut -d: -f1) ]]
	then
		# TODO: If there needs to be some change made, note it
		# properly, for the operator to take care of later with
		# the eselect tool
		local getentinfo=$(egetent group "${newgroup}")
		
		local currgid=$(echo ${getentinfo} | cut -d: -f3)

		if [[ ${currgid} -ne ${groupid} ]] ; then
			debug_msg "The group ${newgroup} needs some values changed." \
				"We're doing so now."
			action="mod"
		else
			# Now, since we've made the proper arrangements for any 
			# possible changes, we now add the current package name 
			# to the database and call it quits
			debug_msg "We already have a group named ${newgroup}." \
				"Nothing to do." 1>&2

			"${SCRIPTDIR}/db.bash" add group "${pkgname}" \
				"${newgroup}" "${userspace}"
			exit 0
		fi
	fi

	if [[ -f "${DBDIR}/group/${newgroup}" && -n "${DEBUG}" ]] ; then
		echo "Group ${newgroup} was previously added by this script," \
			"but it no longer exists" 1>&2
		echo "on the system. We'll re-add them now, but you should" \
			"have used the" 1>&2
		echo "users-config tool to cleanly remove it." 1>&2
	fi

	# Finally, we take take the necessary action, either via groupmod 
	# or groupadd [or it's comparable friends]
	local done_once

	for x in ${GROUP_BACKENDS}; do
		if [[ -e "${SCRIPTDIR}/auth/${x}-${userspace}-group${action}.bash" ]] 
		then
			done_once="yes"
			debug_msg "Running ${x}-${userspace}-group${action}..."
			. "${SCRIPTDIR}/auth/${x}-${userspace}-group${action}.bash"
			"${x}-${userspace}-group${action}" "${groupid}" "${newgroup}" \
				"${root}" || die "group${action} failed"
		else
			echo "$0: Auth backend ${x} with userspace ${userspace} not" \
				"supported by this script." 1>&2
		fi
	done

	[[ -z "${done_once}" ]] && die "Found no workable backends to run"

	# Properly update the dynamic groups database
	"${SCRIPTDIR}/db.bash" add group "${pkgname}" "${newgroup}" "${userspace}"
}

if [[ "${1}" == "--test" ]] ; then
	echo "Syntax OK."
	exit 0
fi

main "$@"
# vim: ts=4 :
