# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

inherit config output

DESCRIPTION="Maintain the system users added by the package manager"
MAINTAINER="pioto@pioto.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}")

prefix=@prefix@
datarootdir=@datarootdir@
scriptdir=${ROOT}@datadir@/@PACKAGE@

# Read the common config stuff
DBDIR=${ROOT}$(load_config "${scriptdir}/common/config.sh" DBDIR)
DATADIR=${ROOT}$(load_config "${scriptdir}/common/config.sh" DATADIR)

### show action

describe_show() {
	echo "Show the users currently added by this script"
}

describe_show_parameters() {
	echo "<mode>"
}

describe_show_options() {
	echo "mode : One of users, groups, or all. Defaults to all."
}

do_show() {
	local mode=all
	mode=${mode:-${1}}

	case ${mode} in
		users)
			for i in $(ls "${DBDIR}/user") ; do
				echo "* ${i}:"
				cat "${DBDIR}/user/${i}"
			done
			;;
		groups)
			for i in $(ls "${DBDIR}/group") ; do
				echo "* ${i}:"
				cat "${DBDIR}/group/${i}"
			done
			;;
		*)
			for i in $(ls "${DBDIR}/user") ; do
				echo "* ${i}:"
				cat "${DBDIR}/user/${i}"
			done
			for i in $(ls "${DBDIR}/group") ; do
				echo "* ${i}:"
				cat "${DBDIR}/group/${i}"
			done
			;;
	esac
}

### scan action

describe_scan() {
	echo "Scans the system for any files owned by the given user and,"
	echo "optionally, removes them. ($(highlight slow))"
}

describe_scan_parameters() {
	echo "[--user user|--group group] <--remove>"
}

describe_scan_options() {
	echo "--user user : scan the filesystem for all files owned by user"
	echo "--group group : scan the filesystem for all files owned by group"
	echo "--remove : remove all files which are found"
}

do_scan() {
	# Parse our commandline args
	local target="${ROOT}"
	target=${target:-"/"}
	local remove=
	local params_valid=
	while [[ ${1#--} != ${1} ]] ; do
		if [[ "--user" == ${1} ]] ; then
			shift
			target="${target} -user ${1}"
			params_valid="yes"
			shift
		elif [[ "--group" == "${1}" ]] ; then
			shift
			target="${target} -group ${1}"
			params_valid="yes"
			shift
		elif [[ "--remove" == "${1}" ]] ; then
			shift
			remove="${remove} | xargs -0 rm -rf"
		elif [[ "--" == "${1}" ]] ; then
			break
		else
			die -q "Unknown parameter ${1}"
		fi
	done

	if [[ ! ${params_valid} ]] ; then
		echo "You didn't provide one of the required paramenters."
		die -q "You must provide either a user or group for the scan action."
	fi

	target="${target} -print0"

	find ${target} ${remove}
}

### update action

describe_update() {
	echo "Removes any users from the system that are no longer"
	echo "required by any installed package, but were once"
	echo "installed by a package."
}

describe_update_parameters() {
	echo "<--pretend|-p>"
}

describe_update_options() {
	echo -n "--pretend|-p : Don't actually remove. List candidates only."
}

do_update() {
	local pretend=
	local deadusers=
	local deadusers_=
	local deadgroups=
	local deadgroups_=

	# Parse our commandline args
	while [[ ${1#--} != ${1} ]] ; do
		if [[ "--pretend" == "${1}" ]] \
		|| [[ "-p" == "${1}" ]] ; then
			shift
			pretend="yes"
		elif [[ "--" == "${1}" ]] ; then
			break
		else
			die -q "Unknown parameter ${1}"
		fi
	done

	# Find all the data files which are empty
	deadusers_=$(find "${DBDIR}/user" -size 0 -print)
	deadgroups_=$(find "${DBDIR}/group" -size 0 -print)

	for i in ${deadusers_} ; do 
		deadusers="${deadusers} $(basename ${i})"
	done
	for i in ${deadgroups_} ; do 
		deadgroups="${deadgroups} $(basename ${i})"
	done

	if [[ -z ${pretend} ]] ; then
		echo "Removing users:"
		for i in ${deadusers} ; do
			echo -n "  ${i} : "
			"${scriptdir}/deluser.sh" ${i} ${ROOT} \
				&& echo "done" || die -q "failed"
			rm "${DATADIR}/users/${i}"
		done

		echo "Removing groups:"
		for i in ${deadgroups} ; do
			echo -n "  ${i} : "
			"${scriptdir}/delgroup.sh" ${i} ${ROOT} \
				&& echo "done" || die -q "failed"
			rm "${DATADIR}/groups/${i}"
		done
	else
		echo "We would have removed:"
		echo "  Users: ${deadusers}"
		echo "  Groups: ${deadgroups}"
	fi
}

# vim: set ft=eselect :
